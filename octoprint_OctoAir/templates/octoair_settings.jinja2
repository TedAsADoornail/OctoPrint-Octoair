<h4>{{ _('Raspberry Pi Inputs') }}</h4>
<p>
  Configure all
  <strong>inputs</strong>. Inputs get data from gpio or connected sensors to provide additional functionality. Inputs can control
  outputs or influence how they behave.
</p>
<p>
  Example of possible inputs are buttons connected to GPIO pins that control outputs or printer events, temperature and humidity
  sensors, and filament sensors.
</p>
<form class="form-horizontal">
  <div data-bind="foreach: settingsViewModel.settings.plugins.enclosure.rpi_inputs">
    <div class="control-group">
      <label class="control-label">{{ _('Label') }}</label>
      <div class="controls">
        <input type="text" class="input-block-level" data-bind="value: label">
        <span class="help-inline">Name of Input</span>
      </div>
    </div>
    <div class="control-group">
      <label class="control-label">{{ _('Input Type') }}</label>
      <div class="controls">
        <input type="radio" value="gpio" data-bind="checked: input_type, attr: {name: 'inputType_' + $index() }"> {{ _('GPIO Input') }}
      </div>
      <div class="controls">
        <input type="radio" value="temperature_sensor" data-bind="checked: input_type, attr: {name: 'inputType_' + $index() }"> {{ _('Temperature Sensor') }}
      </div>
      <div class="control-group">
        <div class="controls">
          <!-- ko if: ($data.input_type() == "gpio")  -->
          <span class="help-inline">
            <span class="label label-info">Info:</span> GPIO will input status of the pin, HIGH / LOW </span>
          <!-- /ko -->
          <!-- ko if: ($data.input_type() == "temperature_sensor")  -->
          <span class="help-inline">
            <span class="label label-info">Info:</span> Temperature Sensors will input temperature and humidity data.
          </span>
          <!-- /ko -->
        </div>
      </div>
    </div>
    <!-- ko if: ($data.input_type() == "temperature_sensor")  -->
    <div id="temperature_reading_content">
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtModel">{{ _('Sensor Type') }}</label>
        <div class="controls">
          <select data-bind="value: temp_sensor_type">
            <option value="">Select Sensor</option>
            <option value="11">DHT11</option>
	    <option value="20">DHT20</option>
            <option value="22">DHT22</option>
            <option value="2302">AM2302</option>
            <option value="18b20">DS18B20</option>
            <option value="si7021">SI7021</option>
            <option value="bme280">BME280</option>
            <option value="bme680">BME680</option>
            <option value="am2320">AM2320</option>
            <option value="aht10">AHT10</option>
            <option value="tmp102">TMP102</option>
            <option value="max31855">MAX31855</option>
            <option value="rpi">Raspberry Pi CPU</option>
            <option value="mcp9808">MCP9808</option>
            <option value="temp_raw_i2c">Raw I2C Temperature</option>
            <option value="hum_raw_i2c">Raw I2C Humidity</option>
          </select>
          <span class="help-inline">
            <span class="label label-important">Attention</span> You need to install and configure the necessary libraries for the temperature sensor, check
            the documentation on
            <a href=" https://github.com/vitormhenrique/OctoPrint-Enclosure">github</a> page</span>
        </div>
      </div>

      <!-- ko if: ($data.temp_sensor_type() == "temp_raw_i2c") || ($data.temp_sensor_type() == "hum_raw_i2c")  -->
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-temp-i2c-bus">{{ _('I2C Bus') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: temp_i2c_bus" id="settings-enclosure-temp-i2c-bus">
          <span class="help-inline">This value should remain 1 unless you've used dtoverlay=i2c-gpio or you are using another bus.
          </span>
        </div>
      </div>

      <div class="control-group">
        <label class="control-label" for="settings-enclosure-temp-i2c-addr">{{ _('I2C Address') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: temp_i2c_address" id="settings-enclosure-temp-i2c-addr">
          <span class="help-inline">I2C address in HEX value, you can find it by running
            <code>i2cdetect -y 1</code> on your Raspberry Pi</span>
        </div>
      </div>

      <div class="control-group">
        <label class="control-label" for="settings-enclosure-temp-i2c-reg">{{ _('I2C Register') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: temp_i2c_register" id="settings-enclosure-temp-i2c-reg">
          <span class="help-inline">I2C register in HEX value</span>
        </div>
      </div>
      <!-- /ko -->

      <!-- ko if: ($data.temp_sensor_type() == "18b20")  -->
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Pin') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: gpio_pin" value="4">
          <span class="help-inline">GPIO pin for temperature sensor, recommended to use 4 as DS18B20 has default support to pin #4 (BCM)</span>
        </div>
      </div>
      <div class"control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Input Pull Resistor') }}</label>
        <div class="controls">
          <select data-bind="value: input_pull_resistor">
            <option value="" selected="selected">None</option>
            <option value="input_pull_up">Input Pullup</option>
          </select>
          <span class="help-inline">Whether to enable the built-in pullup for this temperature sensor. If set, then no external pullup is needed.</span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('DS18B20 Serial') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: ds18b20_serial" value="">
          <span class="help-inline">DS18B20 serial value, needs to be used to have support for multiple sensors, read documentation on github page
            for more information.  The serial is typically in the form of 28-0123456789ab.</span>
        </div>
      </div>
      <!-- /ko -->
      <!-- ko if: ($data.temp_sensor_type() == "si7021") || ($data.temp_sensor_type() == "20") || ($data.temp_sensor_type() == "bme280") || ($data.temp_sensor_type() == "am2320") || ($data.temp_sensor_type() == "aht10") || ($data.temp_sensor_type() == "tmp102") || ($data.temp_sensor_type() == "mcp9808") -->
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Pin') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" value="SCL / SDA" disabled="true">
          <span class="help-inline">GPIO pin for temperature sensor need to connect the sensor to I2C. SCL Clock to GPIO 3 (SCL) and SDA Data to GPIO
            2 (SDA)
          </span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Address') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: temp_sensor_address">
          <span class="help-inline">Sensor address in HEX value, you can find it by running
            <code>i2cdetect -y 1</code> on your Raspberry Pi</span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('i2c Bus') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: temp_sensor_i2cbus">
          <span class="help-inline">This value should remain 1 unless you've used dtoverlay=i2c-gpio.
          </span>
        </div>
      </div>
      <!-- /ko -->
      <!-- ko if: ($data.temp_sensor_type() == "max31855") -->
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Pin') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" value="MISO / SCLK" disabled="true">
          <span class="help-inline">GPIO pin for temperature sensor need to connect the sensor to SPI. Serial Clock to GPIO 1 (SCLK) and Master In/Slave Out Data to GPIO
            9 (MISO)
          </span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Address (CE Select)') }}</label>
        <div class="controls">
          <select data-bind="value: temp_sensor_address">
            <option value="">Select CE</option>
            <option value="0">CE0</option>
            <option value="1">CE1</option>
          </select>
          <span class="help-inline">CE select: CE0 on GPIO 8 or CE1 on GPIO 7</span>
        </div>
      </div>

      <!-- /ko -->
      <!-- ko ifnot: ($data.temp_sensor_type() == "rpi") || ($data.temp_sensor_type() == "18b20") || ($data.temp_sensor_type() == "si7021") || ($data.temp_sensor_type() == "bme280") || ($data.temp_sensor_type() == "am2320") || ($data.temp_sensor_type() == "tmp102") || ($data.temp_sensor_type() == "max31855") || ($data.temp_sensor_type() == "mcp9808") || ($data.temp_sensor_type() == "temp_raw_i2c")  || ($data.temp_sensor_type() == "hum_raw_i2c") -->
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-dhtPin">{{ _('Sensor Pin') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: gpio_pin">
          <span class="help-inline">GPIO pin for temperature sensor, recommended to use 4 as DS18B20 only works on pin 4</span>
        </div>
      </div>
      <!-- /ko -->
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" data-bind="checked: use_fahrenheit"> {{ _('Use Fahrenheit Unit') }}
        </label>
        <span class="help-inline">Choose if you want to work with Celsius or Fahrenheit</span>
      </div>
    </div>
    <!-- /ko -->
    <!-- ko if: ($data.input_type() == "gpio")  -->
    <div class="control-group">
      <label class="control-label">{{ _('Action Type') }}</label>
      <div class="controls">
        <input type="radio" value="output_control" data-bind="checked: action_type, attr: {name: 'actionType_' + $index() }"> {{ _('Output Control') }}
      </div>
      <div class="controls">
        <input type="radio" value="printer_control" data-bind="checked: action_type, attr: {name: 'actionType_' + $index() }"> {{ _('Printer') }}
      </div>
      <div class="control-group">
        <div class="controls">
          <!-- ko if: ($data.action_type() == "printer_control")  -->
          <span class="help-inline">
            <span class="label label-info">Info:</span> PRINTER actions when a condition is met, that can be a filament sensor, button, etc. Actions can
            be Pause \ Resume \ Cancel a printer_control job, change the filament or disable Temperature Control. You can
            use the "change filament" action and set up the input GPIO acording to your sensor, for example, if your filament
            sensor connects to ground when detects the end of the filament, you should choose PULL UP resistors and detect
            the event on the falling edge.</span>
          <!-- /ko -->
          <!-- ko if: ($data.action_type() == "output_control")  -->
          <span class="help-inline">
            <span class="label label-info">Info:</span> Action will control GPIO outputs when a condition is met, for example detect a press of a button.
            You can use this to control any previous configured OUTPUTS, basically beeing able to control your lights / fan
            / printer using mechanical buttons buttons instead of the octoprint interface. You can only control REGULAR outputs.
          </span>
          <!-- /ko -->
        </div>
      </div>
    </div>
    <!-- /ko -->
    <!-- ko if: ($data.input_type() == "gpio")  -->
    <div data-bind="attr: {id: 'input_io_' + $index() }">
      <div class="control-group">
        <label class="control-label" for="settings-enclosure-io1">{{ _('Input IO Number') }}</label>
        <div class="controls">
          <input type="text" class="input-block-level" data-bind="value: gpio_pin">
          <span class="help-inline">Input GPIO that will detect the event that should trigger the action. For example if you have a filament sensor
            you put the GPIO pin that the sensor is connected. This can also be a press of a button or any other signal that
            you want to detect. You can not use GPIO 4 here if you are using temperature sensor DS18B20</span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label">Input Pull Resistor</label>
        <div class="controls">
          <select data-bind="value: input_pull_resistor">
            <option value="input_pull_up">Input Pullup</option>
            <option value="input_pull_down">Input Pulldown</option>
          </select>
          <span class="help-inline">Choose what type of pull resistors that you want on the output. If your signal is active low, that means it should
            run the action when receive a low signal (ground), you should choose PULL UP resistors.</span>
        </div>
      </div>
      <div class="control-group">
        <label class="control-label">Event Trigger</label>
        <div class="controls">
          <select data-bind="value: edge">
            <option value="rise">Rise</option>
            <option value="fall">Fall</option>
          </select>
          <span class="help-inline">Do you want to trigger the event on the rise or falling edge? If you signal is active low, that means it should run
            the action when it receives a low signal (ground), you should choose FALLING EDGE.</span>
        </div>
      </div>
    </div>
    <!-- ko if: ($data.action_type() == "output_control")  -->
    <div class="control-group">
      <label class="control-label"> Controlled IO</label>
      <div class="controls">
        <select data-bind="options: $root.settings_possible_outputs, optionsText: 'label',
                optionsValue: 'index_id', value: $data.controlled_io">
        </select>
        <span class="help-inline">When the event happens, do you want control of which OUTPUT?</span>
      </div>
    </div>
    <!-- ko if: ($root.isRegularOutput($data.controlled_io()))  -->
    <div class="control-group">
      <label class="control-label">Set Controlled IO Value</label>
      <div class="controls">
        <select data-bind="value: controlled_io_set_value">
          <option value="low">Low</option>
          <option value="high">High</option>
          <option value="toggle">Toggle</option>
        </select>
        <span class="help-inline">When the event happens, do you want to turn the controlled IO HIGH or LOW?</span>

      </div>
    </div>
    <!-- /ko -->
    <!-- /ko -->
    <!-- ko if: ( $data.action_type() == "printer_control")  -->
    <div class="control-group">
      <label class="control-label">{{ _('Printer Action') }}</label>
      <div class="controls">
        <select data-bind="value: printer_action">
          <option value="filament">Filament Change</option>
          <option value="resume">Printer Resume</option>
          <option value="pause">Printer Pause</option>
          <option value="cancel">Printer Cancel</option>
          <option value="start">Start Print</option>
          <option value="toggle">Printer Toggle (Connect / Pause / Resume)</option>
          <option value="toggle_job">Job Toggle (Connect / Start / Cancel)</option>
          <option value="stop_temp_hum_control">Stop Temperature Control</option>
        </select>
        <span class="help-inline"> You can use filament change on your filament detectors and add buttons to resume and pause the print job.</span>
      </div>
    </div>
    <!-- ko if: ($data.printer_action() == "filament") -->
    <div class="control-group">
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" data-bind="checked: filament_sensor_enabled"> {{ _('Enable') }}
        </label>
        <span class="help-inline">Enable and disable filament sensors</span>
      </div>
    </div>
    <div class="control-group">
      <label class="control-label">{{ _('Filament detection timeout') }}</label>
      <div class="controls">
        <input type="text" class="input-block-level" data-bind="value: filament_sensor_timeout">
        <span class="help-inline">Time in seconds that filament sensor will be inactive after sensing end of filament. This is to avoid sending multiple
          commands to the printer.
        </span>
      </div>
    </div>
    <!-- /ko -->
    <!-- /ko -->
    <!-- /ko -->
    <!-- ko if: ($data.input_type() == "temperature_sensor")  -->
    <div class="control-group">
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" data-bind="checked: temp_sensor_navbar"> {{ _('Show temperature on navbar') }}
        </label>
        <span class="help-inline">Enable and disable temperature on navbar</span>
      </div>
      <div class="controls">
		    <label class="checkbox">
				  <input type="checkbox" data-bind="checked: show_graph_temp"> {{ _('Show temperature in graph') }}
			  </label>
			  <span class="help-inline">Enable to show temperature in temperature graph, when a printer is connected.
        <!-- ko if: ($data.show_graph_temp())  -->
        <p><i><strong>Note:</strong>This feature currently requires a custom graph plugin like <a href="https://github.com/jneilliii/OctoPrint-PlotlyTempGraph" target="_blank">PlotlyTempGraph</a></i></span></p>
        <!-- /ko -->
		  </div>
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" data-bind="checked: show_graph_humidity"> {{ _('Show humidity in graph') }}
        </label>
        <span class="help-inline">Enable to show humidity in temperature graph, when a printer is connected.
        <!-- ko if: ($data.show_graph_humidity())  -->
        <p><i><strong>Note:</strong>This feature currently requires a custom graph plugin like <a href="https://github.com/jneilliii/OctoPrint-PlotlyTempGraph" target="_blank">PlotlyTempGraph</a></i></span></p>
        <!-- /ko -->
      </div>
    </div>
    <!-- /ko -->
    <div class="control-group">
      <a title="Delete IO" class="btn btn-danger pull-right" data-bind="click: function() { $parent.removeRpiInput($data) }">
        <i class="icon-trash"></i>
      </a>
    </div>
    <div class="control-group">
      <div class="controls">
        <hr/>
      </div>
    </div>
  </div>
  <div class="control-group">
    <button class="btn pull-right" data-bind="click: function() { $root.addRpiInput(); }">Add Inputs...</button>
  </div>
</form>
